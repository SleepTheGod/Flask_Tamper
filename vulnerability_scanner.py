import subprocess
import json

def scan_vulnerability(url):
    try:
        # Run sqlmap with options for more comprehensive scanning
        result = subprocess.run(
            ['sqlmap', '-u', url, '--batch', '--json', '--level=5', '--risk=3'],
            capture_output=True,
            text=True,
            check=True
        )

        # Parse the output
        output = json.loads(result.stdout)
        vulnerabilities = extract_vulnerabilities(output)
        return {
            'status': 'scanned',
            'vulnerabilities': vulnerabilities
        }

    except subprocess.CalledProcessError as e:
        # Handle errors from sqlmap
        return {
            'status': 'error',
            'message': f"Command failed with error: {e.stderr.strip()}"
        }
    except json.JSONDecodeError:
        # Handle errors in JSON parsing
        return {
            'status': 'error',
            'message': "Failed to parse sqlmap output."
        }
    except Exception as e:
        return {
            'status': 'error',
            'message': str(e)
        }

def extract_vulnerabilities(output):
    """Extract relevant vulnerability details from sqlmap output."""
    vulnerabilities = []
    
    # Check for common vulnerability indicators in the output
    if 'vulnerabilities' in output:
        for vulnerability in output['vulnerabilities']:
            vulnerabilities.append({
                'name': vulnerability['name'],
                'description': vulnerability.get('description', 'No description available'),
                'payloads': vulnerability.get('payloads', []),
                'evidence': vulnerability.get('evidence', 'No evidence available')
            })
    
    return vulnerabilities
